"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const vite_1 = require("vite");
const vite_main_config_1 = require("./config/vite.main.config");
const vite_preload_config_1 = require("./config/vite.preload.config");
const vite_renderer_config_1 = require("./config/vite.renderer.config");
const d = (0, debug_1.default)('@electron-forge/plugin-vite:ViteConfig');
class ViteConfigGenerator {
    constructor(pluginConfig, projectDir, isProd) {
        this.pluginConfig = pluginConfig;
        this.projectDir = projectDir;
        this.isProd = isProd;
        d('Config mode:', this.mode);
    }
    async resolveConfig(buildConfig, target) {
        const configEnv = {
            // @see - https://vitejs.dev/config/#conditional-config
            command: this.isProd ? 'build' : 'serve',
            // `mode` affects `.env.[mode]` file load.
            mode: this.mode,
            // Forge extension variables.
            root: this.projectDir,
            forgeConfig: this.pluginConfig,
            forgeConfigSelf: buildConfig,
        };
        // `configEnv` is to be passed as an arguments when the user export a function in `vite.config.js`.
        const userConfig = (await (0, vite_1.loadConfigFromFile)(configEnv, buildConfig.config))?.config;
        switch (target) {
            case 'main':
                return (0, vite_main_config_1.getConfig)(configEnv, userConfig);
            case 'preload':
                return (0, vite_preload_config_1.getConfig)(configEnv, userConfig);
            case 'renderer':
                return (0, vite_renderer_config_1.getConfig)(configEnv, userConfig);
            default:
                throw new Error(`Unknown target: ${target}, expected 'main', 'preload' or 'renderer'`);
        }
    }
    get mode() {
        // Vite's `mode` can be passed in via command.
        // Since we are currently using the JavaScript API, we are opinionated defining two default values for mode here.
        // The `mode` set by the end user in `vite.config.js` has a higher priority.
        return this.isProd ? 'production' : 'development';
    }
    async getBuildConfig() {
        if (!Array.isArray(this.pluginConfig.build)) {
            throw new Error('"config.build" must be an Array');
        }
        const configs = this.pluginConfig.build
            // Prevent load the default `vite.config.js` file.
            .filter(({ config }) => config)
            .map((buildConfig) => this.resolveConfig(buildConfig, buildConfig.target ?? 'main'));
        return await Promise.all(configs);
    }
    async getRendererConfig() {
        if (!Array.isArray(this.pluginConfig.renderer)) {
            throw new Error('"config.renderer" must be an Array');
        }
        const configs = this.pluginConfig.renderer
            // Prevent load the default `vite.config.js` file.
            .filter(({ config }) => config)
            .map((buildConfig) => this.resolveConfig(buildConfig, 'renderer'));
        return await Promise.all(configs);
    }
}
exports.default = ViteConfigGenerator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVml0ZUNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9WaXRlQ29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsa0RBQTBCO0FBQzFCLCtCQUEwQztBQUUxQyxnRUFBMkU7QUFDM0Usc0VBQWlGO0FBQ2pGLHdFQUFtRjtBQUtuRixNQUFNLENBQUMsR0FBRyxJQUFBLGVBQUssRUFBQyx3Q0FBd0MsQ0FBQyxDQUFDO0FBSTFELE1BQXFCLG1CQUFtQjtJQUN0QyxZQUE2QixZQUE4QixFQUFtQixVQUFrQixFQUFtQixNQUFlO1FBQXJHLGlCQUFZLEdBQVosWUFBWSxDQUFrQjtRQUFtQixlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQW1CLFdBQU0sR0FBTixNQUFNLENBQVM7UUFDaEksQ0FBQyxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELEtBQUssQ0FBQyxhQUFhLENBQUMsV0FBNkQsRUFBRSxNQUFjO1FBQy9GLE1BQU0sU0FBUyxHQUFjO1lBQzNCLHVEQUF1RDtZQUN2RCxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPO1lBQ3hDLDBDQUEwQztZQUMxQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFFZiw2QkFBNkI7WUFDN0IsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQ3JCLFdBQVcsRUFBRSxJQUFJLENBQUMsWUFBWTtZQUM5QixlQUFlLEVBQUUsV0FBVztTQUM3QixDQUFDO1FBRUYsbUdBQW1HO1FBQ25HLE1BQU0sVUFBVSxHQUFHLENBQUMsTUFBTSxJQUFBLHlCQUFrQixFQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUM7UUFDckYsUUFBUSxNQUFNLEVBQUUsQ0FBQztZQUNmLEtBQUssTUFBTTtnQkFDVCxPQUFPLElBQUEsNEJBQWlCLEVBQUMsU0FBK0IsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUN4RSxLQUFLLFNBQVM7Z0JBQ1osT0FBTyxJQUFBLCtCQUFvQixFQUFDLFNBQStCLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDM0UsS0FBSyxVQUFVO2dCQUNiLE9BQU8sSUFBQSxnQ0FBcUIsRUFBQyxTQUFrQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQy9FO2dCQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLE1BQU0sNENBQTRDLENBQUMsQ0FBQztRQUMzRixDQUFDO0lBQ0gsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLDhDQUE4QztRQUM5QyxpSEFBaUg7UUFDakgsNEVBQTRFO1FBQzVFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7SUFDcEQsQ0FBQztJQUVELEtBQUssQ0FBQyxjQUFjO1FBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUM1QyxNQUFNLElBQUksS0FBSyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7UUFDckQsQ0FBQztRQUVELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSztZQUNyQyxrREFBa0Q7YUFDakQsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDO2FBQzlCLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRXZGLE9BQU8sTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxLQUFLLENBQUMsaUJBQWlCO1FBQ3JCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztZQUMvQyxNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7UUFDeEQsQ0FBQztRQUVELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUTtZQUN4QyxrREFBa0Q7YUFDakQsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDO2FBQzlCLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUVyRSxPQUFPLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwQyxDQUFDO0NBQ0Y7QUFoRUQsc0NBZ0VDIn0=