"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VitePlugin = void 0;
const node_path_1 = __importDefault(require("node:path"));
const plugin_base_1 = require("@electron-forge/plugin-base");
const chalk_1 = __importDefault(require("chalk"));
const debug_1 = __importDefault(require("debug"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const listr2_1 = require("listr2");
const vite_1 = __importDefault(require("vite"));
const plugins_1 = require("./util/plugins");
const ViteConfig_1 = __importDefault(require("./ViteConfig"));
const d = (0, debug_1.default)('electron-forge:plugin:vite');
class VitePlugin extends plugin_base_1.PluginBase {
    constructor() {
        super(...arguments);
        this.name = 'vite';
        this.isProd = false;
        this.watchers = [];
        this.servers = [];
        this.init = (dir) => {
            this.setDirectories(dir);
            d('hooking process events');
            process.on('exit', (_code) => this.exitHandler({ cleanup: true }));
            process.on('SIGINT', (_signal) => this.exitHandler({ exit: true }));
        };
        this.getHooks = () => {
            return {
                preStart: [
                    (0, plugin_base_1.namedHookWithTaskFn)(async (task) => {
                        if (VitePlugin.alreadyStarted)
                            return;
                        VitePlugin.alreadyStarted = true;
                        await fs_extra_1.default.remove(this.baseDir);
                        return task?.newListr([
                            {
                                title: 'Launching dev servers for renderer process code',
                                task: async () => {
                                    await this.launchRendererDevServers();
                                },
                                rendererOptions: {
                                    persistentOutput: true,
                                    timer: { ...listr2_1.PRESET_TIMER },
                                },
                            },
                            // The main process depends on the `server.port` of the renderer process, so the renderer process is run first.
                            {
                                title: 'Compiling main process code',
                                task: async () => {
                                    await this.build();
                                },
                                rendererOptions: {
                                    timer: { ...listr2_1.PRESET_TIMER },
                                },
                            },
                        ]);
                    }, 'Preparing vite bundles'),
                ],
                prePackage: [
                    (0, plugin_base_1.namedHookWithTaskFn)(async () => {
                        this.isProd = true;
                        await fs_extra_1.default.remove(this.baseDir);
                        await Promise.all([this.build(), this.buildRenderer()]);
                    }, 'Building vite bundles'),
                ],
                postStart: async (_config, child) => {
                    d('hooking electron process exit');
                    child.on('exit', () => {
                        if (child.restarted)
                            return;
                        this.exitHandler({ cleanup: true, exit: true });
                    });
                },
                resolveForgeConfig: this.resolveForgeConfig,
                packageAfterCopy: this.packageAfterCopy,
            };
        };
        this.resolveForgeConfig = async (forgeConfig) => {
            forgeConfig.packagerConfig ??= {};
            if (forgeConfig.packagerConfig.ignore) {
                if (typeof forgeConfig.packagerConfig.ignore !== 'function') {
                    console.error(chalk_1.default.yellow(`You have set packagerConfig.ignore, the Electron Forge Vite plugin normally sets this automatically.

Your packaged app may be larger than expected if you dont ignore everything other than the '.vite' folder`));
                }
                return forgeConfig;
            }
            forgeConfig.packagerConfig.ignore = (file) => {
                if (!file)
                    return false;
                // `file` always starts with `/`
                // @see - https://github.com/electron/packager/blob/v18.1.3/src/copy-filter.ts#L89-L93
                // Collect the files built by Vite
                return !file.startsWith('/.vite');
            };
            return forgeConfig;
        };
        this.packageAfterCopy = async (_forgeConfig, buildPath) => {
            const pj = await fs_extra_1.default.readJson(node_path_1.default.resolve(this.projectDir, 'package.json'));
            if (!pj.main?.includes('.vite/')) {
                throw new Error(`Electron Forge is configured to use the Vite plugin. The plugin expects the
"main" entry point in "package.json" to be ".vite/*" (where the plugin outputs
the generated files). Instead, it is ${JSON.stringify(pj.main)}`);
            }
            if (pj.config) {
                delete pj.config.forge;
            }
            await fs_extra_1.default.writeJson(node_path_1.default.resolve(buildPath, 'package.json'), pj, { spaces: 2 });
        };
        // Main process, Preload scripts and Worker process, etc.
        this.build = async () => {
            const configs = await this.configGenerator.getBuildConfig();
            const buildTasks = [];
            const isWatcher = (x) => typeof x?.close === 'function';
            for (const userConfig of configs) {
                const buildTask = new Promise((resolve, reject) => {
                    vite_1.default
                        .build({
                        // Avoid recursive builds caused by users configuring @electron-forge/plugin-vite in Vite config file.
                        configFile: false,
                        ...userConfig,
                        plugins: [(0, plugins_1.onBuildDone)(resolve), ...(userConfig.plugins ?? [])],
                    })
                        .then((result) => {
                        if (isWatcher(result)) {
                            this.watchers.push(result);
                        }
                        return result;
                    })
                        .catch(reject);
                });
                buildTasks.push(buildTask);
            }
            await Promise.all(buildTasks);
        };
        // Renderer process
        this.buildRenderer = async () => {
            for (const userConfig of await this.configGenerator.getRendererConfig()) {
                await vite_1.default.build({
                    configFile: false,
                    ...userConfig,
                });
            }
        };
        this.launchRendererDevServers = async () => {
            for (const userConfig of await this.configGenerator.getRendererConfig()) {
                const viteDevServer = await vite_1.default.createServer({
                    configFile: false,
                    ...userConfig,
                });
                await viteDevServer.listen();
                viteDevServer.printUrls();
                this.servers.push(viteDevServer);
                if (viteDevServer.httpServer) {
                    // Make sure that `getDefines` in VitePlugin.ts gets the correct `server.port`. (#3198)
                    const addressInfo = viteDevServer.httpServer.address();
                    const isAddressInfo = (x) => x?.address;
                    if (isAddressInfo(addressInfo)) {
                        userConfig.server ??= {};
                        userConfig.server.port = addressInfo.port;
                    }
                }
            }
        };
        this.exitHandler = (options, err) => {
            d('handling process exit with:', options);
            if (options.cleanup) {
                for (const watcher of this.watchers) {
                    d('cleaning vite watcher');
                    watcher.close();
                }
                this.watchers = [];
                for (const server of this.servers) {
                    d('cleaning http server');
                    server.close();
                }
                this.servers = [];
            }
            if (err)
                console.error(err.stack);
            // Why: This is literally what the option says to do.
            // eslint-disable-next-line no-process-exit
            if (options.exit)
                process.exit();
        };
    }
    setDirectories(dir) {
        this.projectDir = dir;
        this.baseDir = node_path_1.default.join(dir, '.vite');
    }
    get configGenerator() {
        return (this.configGeneratorCache ??= new ViteConfig_1.default(this.config, this.projectDir, this.isProd));
    }
}
exports.VitePlugin = VitePlugin;
VitePlugin.alreadyStarted = false;
exports.default = VitePlugin;
//# sourceMappingURL=data:application/json;base64,