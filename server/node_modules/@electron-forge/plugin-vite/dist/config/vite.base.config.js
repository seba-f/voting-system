"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pluginHotRestart = exports.pluginExposeRenderer = exports.getBuildDefine = exports.getDefineKeys = exports.getBuildConfig = exports.external = exports.builtins = void 0;
const node_module_1 = require("node:module");
exports.builtins = ['electron', ...node_module_1.builtinModules.map((m) => [m, `node:${m}`]).flat()];
exports.external = [...exports.builtins];
// Used for hot reload after preload scripts.
const viteDevServers = {};
const viteDevServerUrls = {};
function getBuildConfig(env) {
    const { root, mode, command } = env;
    return {
        root,
        mode,
        build: {
            // Prevent multiple builds from interfering with each other.
            emptyOutDir: false,
            // ðŸš§ Multiple builds may conflict.
            outDir: '.vite/build',
            watch: command === 'serve' ? {} : null,
            minify: command === 'build',
        },
        clearScreen: false,
    };
}
exports.getBuildConfig = getBuildConfig;
function getDefineKeys(names) {
    const define = {};
    // change name from kebab case to upper snake case to agree with vite:define plugin
    // this allows the VitePluginRendererConfig entries to contain names with dashes
    return names.reduce((acc, name) => {
        const NAME = name.toUpperCase().replaceAll('-', '_');
        const keys = {
            VITE_DEV_SERVER_URL: `${NAME}_VITE_DEV_SERVER_URL`,
            VITE_NAME: `${NAME}_VITE_NAME`,
        };
        return { ...acc, [name]: keys };
    }, define);
}
exports.getDefineKeys = getDefineKeys;
function getBuildDefine(env) {
    const { command, forgeConfig } = env;
    const names = forgeConfig.renderer.filter(({ name }) => name != null).map(({ name }) => name);
    const defineKeys = getDefineKeys(names);
    const define = Object.entries(defineKeys).reduce((acc, [name, keys]) => {
        const { VITE_DEV_SERVER_URL, VITE_NAME } = keys;
        const def = {
            [VITE_DEV_SERVER_URL]: command === 'serve' ? JSON.stringify(viteDevServerUrls[VITE_DEV_SERVER_URL]) : undefined,
            [VITE_NAME]: JSON.stringify(name),
        };
        return { ...acc, ...def };
    }, {});
    return define;
}
exports.getBuildDefine = getBuildDefine;
function pluginExposeRenderer(name) {
    const { VITE_DEV_SERVER_URL } = getDefineKeys([name])[name];
    return {
        name: '@electron-forge/plugin-vite:expose-renderer',
        configureServer(server) {
            // Expose server for preload scripts hot reload.
            viteDevServers[name] = server;
            server.httpServer?.once('listening', () => {
                const addressInfo = server.httpServer?.address();
                // Expose env constant for main process use.
                viteDevServerUrls[VITE_DEV_SERVER_URL] = `http://localhost:${addressInfo?.port}`;
            });
        },
    };
}
exports.pluginExposeRenderer = pluginExposeRenderer;
function pluginHotRestart(command) {
    return {
        name: '@electron-forge/plugin-vite:hot-restart',
        closeBundle() {
            if (command === 'reload') {
                for (const server of Object.values(viteDevServers)) {
                    // Preload scripts hot reload.
                    server.ws.send({ type: 'full-reload' });
                }
            }
            else if (command === 'restart') {
                // Main process hot restart.
                // https://github.com/electron/forge/blob/v7.2.0/packages/api/core/src/api/start.ts#L216-L223
                // TODO: blocked in #3380
                // process.stdin.emit('data', 'rs');
            }
        },
    };
}
exports.pluginHotRestart = pluginHotRestart;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidml0ZS5iYXNlLmNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25maWcvdml0ZS5iYXNlLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBNkM7QUFLaEMsUUFBQSxRQUFRLEdBQUcsQ0FBQyxVQUFVLEVBQUUsR0FBRyw0QkFBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUUvRSxRQUFBLFFBQVEsR0FBRyxDQUFDLEdBQUcsZ0JBQVEsQ0FBQyxDQUFDO0FBRXRDLDZDQUE2QztBQUM3QyxNQUFNLGNBQWMsR0FBa0MsRUFBRSxDQUFDO0FBQ3pELE1BQU0saUJBQWlCLEdBQTJCLEVBQUUsQ0FBQztBQUVyRCxTQUFnQixjQUFjLENBQUMsR0FBdUI7SUFDcEQsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsR0FBRyxDQUFDO0lBRXBDLE9BQU87UUFDTCxJQUFJO1FBQ0osSUFBSTtRQUNKLEtBQUssRUFBRTtZQUNMLDREQUE0RDtZQUM1RCxXQUFXLEVBQUUsS0FBSztZQUNsQixtQ0FBbUM7WUFDbkMsTUFBTSxFQUFFLGFBQWE7WUFDckIsS0FBSyxFQUFFLE9BQU8sS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSTtZQUN0QyxNQUFNLEVBQUUsT0FBTyxLQUFLLE9BQU87U0FDNUI7UUFDRCxXQUFXLEVBQUUsS0FBSztLQUNuQixDQUFDO0FBQ0osQ0FBQztBQWhCRCx3Q0FnQkM7QUFFRCxTQUFnQixhQUFhLENBQUMsS0FBZTtJQUMzQyxNQUFNLE1BQU0sR0FBOEMsRUFBRSxDQUFDO0lBRTdELG1GQUFtRjtJQUNuRixnRkFBZ0Y7SUFFaEYsT0FBTyxLQUFLLENBQUMsTUFBTSxD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