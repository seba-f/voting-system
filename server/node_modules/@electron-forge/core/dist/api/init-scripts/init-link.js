"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initLink = void 0;
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = __importDefault(require("node:path"));
const core_utils_1 = require("@electron-forge/core-utils");
const debug_1 = __importDefault(require("debug"));
const read_package_json_1 = require("../../util/read-package-json");
const d = (0, debug_1.default)('electron-forge:init:link');
/**
 * Link local forge dependencies
 *
 * This allows developers working on forge itself to easily init
 * a local template and have it use their local plugins / core / cli packages.
 *
 * Note: `yarn link:prepare` needs to run first before dependencies can be
 * linked.
 */
async function initLink(pm, dir, task) {
    const shouldLink = process.env.LINK_FORGE_DEPENDENCIES_ON_INIT;
    if (shouldLink) {
        d('Linking forge dependencies');
        const packageJson = await (0, read_package_json_1.readRawPackageJson)(dir);
        // TODO(erickzhao): the `--link-folder` argument only works for `yarn`. Since this command is
        // only made for Forge contributors, it isn't a big deal if it doesn't work for other package managers,
        // but we should make it cleaner.
        const linkFolder = node_path_1.default.resolve(__dirname, '..', '..', '..', '..', '..', '..', '.links');
        for (const packageName of Object.keys(packageJson.devDependencies)) {
            if (packageName.startsWith('@electron-forge/')) {
                if (task)
                    task.output = `${pm.executable} link --link-folder ${linkFolder} ${packageName}`;
                await (0, core_utils_1.spawnPackageManager)(pm, ['link', '--link-folder', linkFolder, packageName], {
                    cwd: dir,
                });
            }
        }
        await node_fs_1.default.promises.chmod(node_path_1.default.resolve(dir, 'node_modules', '.bin', 'electron-forge'), 0o755);
    }
    else {
        d('LINK_FORGE_DEPENDENCIES_ON_INIT is falsy. Skipping.');
    }
}
exports.initLink = initLink;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC1saW5rLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FwaS9pbml0LXNjcmlwdHMvaW5pdC1saW5rLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHNEQUF5QjtBQUN6QiwwREFBNkI7QUFFN0IsMkRBQTRFO0FBRTVFLGtEQUEwQjtBQUUxQixvRUFBa0U7QUFFbEUsTUFBTSxDQUFDLEdBQUcsSUFBQSxlQUFLLEVBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUU1Qzs7Ozs7Ozs7R0FRRztBQUNJLEtBQUssVUFBVSxRQUFRLENBQUksRUFBYSxFQUFFLEdBQVcsRUFBRSxJQUF3QjtJQUNwRixNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUErQixDQUFDO0lBQy9ELElBQUksVUFBVSxFQUFFLENBQUM7UUFDZixDQUFDLENBQUMsNEJBQTRCLENBQUMsQ0FBQztRQUNoQyxNQUFNLFdBQVcsR0FBRyxNQUFNLElBQUEsc0NBQWtCLEVBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEQsNkZBQTZGO1FBQzdGLHVHQUF1RztRQUN2RyxpQ0FBaUM7UUFDakMsTUFBTSxVQUFVLEdBQUcsbUJBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3pGLEtBQUssTUFBTSxXQUFXLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQztZQUNuRSxJQUFJLFdBQVcsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDO2dCQUMvQyxJQUFJLElBQUk7b0JBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxVQUFVLHVCQUF1QixVQUFVLElBQUksV0FBVyxFQUFFLENBQUM7Z0JBQzNGLE1BQU0sSUFBQSxnQ0FBbUIsRUFBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxXQUFXLENBQUMsRUFBRTtvQkFDaEYsR0FBRyxFQUFFLEdBQUc7aUJBQ1QsQ0FBQyxDQUFDO1lBQ0wsQ0FBQztRQUNILENBQUM7UUFDRCxNQUFNLGlCQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxtQkFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzlGLENBQUM7U0FBTSxDQUFDO1FBQ04sQ0FBQyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7SUFDM0QsQ0FBQztBQUNILENBQUM7QUFyQkQsNEJBcUJDIn0=